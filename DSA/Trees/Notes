# Types of Binary Trees

    1) Full Binary Tree: A binary tree where every node has either 0 or 2 children.

          1
        /   \
       2     3
      / \   / \
     4   5 6   7

    2) Complete Binary Tree: A binary tree in which all levels are completely filled except possibly for the last level, which should be filled from left to right.

          1
        /   \
       2     3
      / \   /
     4   5 6

    3) Perfect Binary Tree: A binary tree in which all the internal nodes have two children, and all leaf nodes are at the same level.

          1
        /   \
       2     3
      / \   / \
     4   5 6   7

    4)Balanced Binary Tree: A binary tree in which the height of the left and right subtrees of any node differ by at most 1.

          1
        /   \
       2     3
      /
     4

    5) Skewed Binary Tree: A tree where all nodes are either to the left or right of their parent node.
       Types:
           a) Left-Skewed: All nodes have only a left child.
           b) Right-Skewed: All nodes have only a right child.

     1
      \
       2
        \
         3
          \
           4

    6)  Degenerate (or Pathological) Tree: A tree where each parent node has only one child, making it essentially a linked list.

     1
      \
       2
        \
         3
          \
           4

    7) Binary Search Tree (BST): A binary tree where the left child of a node contains only nodes with values less than the node’s value, and the right child only nodes with values greater than the node’s value.

          4
        /   \
       2     6
      / \   / \
     1  3  5   7

    8) AVL Tree: A self-balancing binary search tree where the difference between heights of left and right subtrees cannot be more than one for all nodes.

          3
        /   \
       2     5
      /     / \
     1     4   6


# Properties
    In perfect binary tree let 'h' be height, 'N' be leaves
        1) total numbers of nodes is '2^(h+1) + 1'
        2) leaf nodes = 2^h
        3) remaining nodes (except leaf nodes) = [2^(h+1) + 1] - [2^h]
        4) number of levels = log(N+1)

    Search for another properties.
